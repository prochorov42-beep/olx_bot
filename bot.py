import asyncio
import sqlite3
import os
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import requests
from bs4 import BeautifulSoup

# –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN.")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°—Å—ã–ª–∫–∏ OLX –¥–ª—è Wroc≈Çaw
URLS = {
    "–æ–±—ã—á–Ω—ã–µ": "https://www.olx.pl/d/rowery/q-rower/?search%5Bfilter_enum_city%5D%5B0%5D=wroclaw",
    "—ç–ª–µ–∫—Ç—Ä–æ": "https://www.olx.pl/d/rowery/q-rower-elektryczny/?search%5Bfilter_enum_city%5D%5B0%5D=wroclaw"
}

MAX_PRICE = {
    "–æ–±—ã—á–Ω—ã–µ": 250,
    "—ç–ª–µ–∫—Ç—Ä–æ": 1300
}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("ads.db")
c = conn.cursor()
c.execute("CREATE TABLE IF NOT EXISTS sent_ads (ad_id TEXT PRIMARY KEY)")
conn.commit()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üö≤ –û–±—ã—á–Ω—ã–µ"), KeyboardButton(text="‚ö° –≠–ª–µ–∫—Ç—Ä–æ")],
        [KeyboardButton(text="‚ñ∂Ô∏è –ü—É—Å–∫"), KeyboardButton(text="‚è∏ –ü–∞—É–∑–∞"), KeyboardButton(text="‚õî –°—Ç–æ–ø")]
    ],
    resize_keyboard=True
)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
user_subscribed = {}

async def fetch_ads(category):
    url = URLS[category]
    r = requests.get(url)
    soup = BeautifulSoup(r.text, "html.parser")
    ads = []
    for item in soup.select("div.offer-wrapper"):
        try:
            title = item.select_one("strong").text.strip()
            link = item.select_one("a")["href"]
            price_text = item.select_one(".price").text.strip().replace("z≈Ç", "").replace(" ", "")
            price = int(price_text)
            ad_id = link.split("/")[-1]
            if price <= MAX_PRICE[category]:
                ads.append((ad_id, title, link, price))
        except:
            continue
    return ads

async def send_new_ads(user_id, category):
    ads = await fetch_ads(category)
    for ad_id, title, link, price in ads:
        c.execute("SELECT 1 FROM sent_ads WHERE ad_id=?", (ad_id,))
        if not c.fetchone():
            await bot.send_message(user_id, f"{title}\n{price} z≈Ç\n{link}")
            c.execute("INSERT INTO sent_ads (ad_id) VALUES (?)", (ad_id,))
            conn.commit()

async def check_ads():
    while True:
        for user_id, categories in user_subscribed.items():
            for category in categories:
                await send_new_ads(user_id, category)
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# –•–µ–Ω–¥–ª–µ—Ä /start
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    user_subscribed[user_id] = []
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)

dp.message.register(start_handler, F.text == "/start")

# –•–µ–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–æ–∫
async def button_handler(message: types.Message):
    user_id = message.from_user.id
    text = message.text

    if text in ["üö≤ –û–±—ã—á–Ω—ã–µ", "‚ö° –≠–ª–µ–∫—Ç—Ä–æ"]:
        category = "–æ–±—ã—á–Ω—ã–µ" if text == "üö≤ –û–±—ã—á–Ω—ã–µ" else "—ç–ª–µ–∫—Ç—Ä–æ"
        if user_id not in user_subscribed:
            user_subscribed[user_id] = []
        if category not in user_subscribed[user_id]:
            user_subscribed[user_id].append(category)
        await message.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {category} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")

    elif text in ["‚ñ∂Ô∏è –ü—É—Å–∫", "‚è∏ –ü–∞—É–∑–∞", "‚õî –°—Ç–æ–ø"]:
        if text == "‚ñ∂Ô∏è –ü—É—Å–∫":
            if user_id not in user_subscribed:
                user_subscribed[user_id] = []
            await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.")
        elif text == "‚è∏ –ü–∞—É–∑–∞":
            user_subscribed[user_id] = []
            await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        elif text == "‚õî –°—Ç–æ–ø":
            if user_id in user_subscribed:
                del user_subscribed[user_id]
            await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

dp.message.register(button_handler)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    asyncio.create_task(check_ads())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

