import asyncio
import os
import aiosqlite
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from bs4 import BeautifulSoup

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN.")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°—Å—ã–ª–∫–∏ OLX –¥–ª—è Wroc≈Çaw
URLS = {
    "–æ–±—ã—á–Ω—ã–µ": "https://www.olx.pl/d/rowery/q-rower/?search%5Bfilter_enum_city%5D%5B0%5D=wroclaw",
    "—ç–ª–µ–∫—Ç—Ä–æ": "https://www.olx.pl/d/rowery/q-rower-elektryczny/?search%5Bfilter_enum_city%5D%5B0%5D=wroclaw"
}

MAX_PRICE = {
    "–æ–±—ã—á–Ω—ã–µ": 250,
    "—ç–ª–µ–∫—Ç—Ä–æ": 1300
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üö≤ –û–±—ã—á–Ω—ã–µ"), KeyboardButton(text="‚ö° –≠–ª–µ–∫—Ç—Ä–æ")],
        [KeyboardButton(text="‚ñ∂Ô∏è –ü—É—Å–∫"), KeyboardButton(text="‚è∏ –ü–∞—É–∑–∞"), KeyboardButton(text="‚õî –°—Ç–æ–ø")]
    ],
    resize_keyboard=True
)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_subscribed = {}

# ---------------------------
# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π
# ---------------------------
DB_PATH = "ads.db"

async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("CREATE TABLE IF NOT EXISTS sent_ads (ad_id TEXT PRIMARY KEY)")
        await db.commit()

async def ad_exists(ad_id):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT 1 FROM sent_ads WHERE ad_id=?", (ad_id,)) as cursor:
            return await cursor.fetchone() is not None

async def save_ad(ad_id):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("INSERT INTO sent_ads (ad_id) VALUES (?)", (ad_id,))
        await db.commit()

# ---------------------------
# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
# ---------------------------
async def fetch_ads(category):
    url = URLS[category]
    ads = []
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as r:
            text = await r.text()
    soup = BeautifulSoup(text, "html.parser")
    for item in soup.select("div.offer-wrapper"):
        try:
            title = item.select_one("strong").text.strip()
            link = item.select_one("a")["href"]
            price_text = item.select_one(".price").text.strip().replace("z≈Ç", "").replace(" ", "")
            try:
                price = int(price_text)
            except ValueError:
                continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±–µ–∑ —Ü–µ–Ω—ã
            ad_id = link.split("/")[-1]
            if price <= MAX_PRICE[category]:
                ads.append((ad_id, title, link, price))
        except:
            continue
    return ads

async def send_new_ads(user_id, category):
    ads = await fetch_ads(category)
    for ad_id, title, link, price in ads:
        if not await ad_exists(ad_id):
            await bot.send_message(user_id, f"{title}\n{price} z≈Ç\n{link}")
            await save_ad(ad_id)

# ---------------------------
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ
# ---------------------------
async def check_ads():
    while True:
        for user_id, categories in user_subscribed.items():
            for category in categories:
                await send_new_ads(user_id, category)
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# ---------------------------
# –•–µ–Ω–¥–ª–µ—Ä—ã
# ---------------------------
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    user_id = message.from_user.id
    user_subscribed[user_id] = []
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)

@dp.message_handler()
async def handle_messages(message: types.Message):
    user_id = message.from_user.id
    text = message.text

    if text in ["üö≤ –û–±—ã—á–Ω—ã–µ", "‚ö° –≠–ª–µ–∫—Ç—Ä–æ"]:
        category = "–æ–±—ã—á–Ω—ã–µ" if text == "üö≤ –û–±—ã—á–Ω—ã–µ" else "—ç–ª–µ–∫—Ç—Ä–æ"
        if user_id not in user_subscribed:
            user_subscribed[user_id] = []
        if category not in user_subscribed[user_id]:
            user_subscribed[user_id].append(category)
        await message.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {category} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")

    elif text in ["‚ñ∂Ô∏è –ü—É—Å–∫", "‚è∏ –ü–∞—É–∑–∞", "‚õî –°—Ç–æ–ø"]:
        if text == "‚ñ∂Ô∏è –ü—É—Å–∫":
            if user_id not in user_subscribed:
                user_subscribed[user_id] = []
            await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.")
        elif text == "‚è∏ –ü–∞—É–∑–∞":
            user_subscribed[user_id] = []
            await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        elif text == "‚õî –°—Ç–æ–ø":
            if user_id in user_subscribed:
                del user_subscribed[user_id]
            await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# ---------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ---------------------------
async def main():
    await init_db()
    asyncio.create_task(check_ads())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


